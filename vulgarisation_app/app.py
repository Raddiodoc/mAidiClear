import streamlit as st

st.set_page_config(page_title="mAidiClear : Vulgarisation de Compte Rendu M√©dical", page_icon="ü©∫")

st.markdown("<h1 style='text-align: center;'>ü©∫ mAidiClear</h1>", unsafe_allow_html=True)

st.markdown("""
<div style='text-align: center; font-size: 16px; color: gray;'>
<p>mAidiClear est un outil d‚Äôaide √† la compr√©hension des comptes rendus m√©dicaux.</p>
<p>Il simplifie leur contenu sans interpr√©tation ni avis m√©dical.</p>
<p>Ce service ne remplace en aucun cas une consultation ou un √©change avec un professionnel de sant√©.</p>
<p>Aucune donn√©e n‚Äôest stock√©e ni transmise.</p>
</div>
""", unsafe_allow_html=True)


import os
import io
import re
import pdfplumber
from openai import OpenAI
import tempfile
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import mm
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer
from reportlab.lib.styles import ParagraphStyle

# Config
lang = st.sidebar.selectbox("üåê Language / Langue", ["Fran√ßais", "English"])
is_fr = lang == "Fran√ßais"

T = {
    "title": {"Fran√ßais": "ü©∫ mAIdiClear : Vulgarisation de Compte Rendu M√©dical", "English": "ü©∫ mAIdiClear: Medical Report Explanation"},
    "upload": {"Fran√ßais": "üìÑ Uploadez un compte rendu PDF", "English": "üìÑ Upload a medical report (PDF)"},
    "error": {"Fran√ßais": "‚ùå Aucun texte d√©tect√© dans ce fichier.", "English": "‚ùå No readable text detected in this file."},
    "process": {"Fran√ßais": "üí¨ Vulgariser le compte rendu", "English": "üí¨ Simplify the report"},
    "processing": {"Fran√ßais": "Traitement en cours...", "English": "Processing..."},
    "done": {"Fran√ßais": "‚úÖ Vulgarisation termin√©e", "English": "‚úÖ Simplification complete"},
    "result": {"Fran√ßais": "üìò R√©sultat", "English": "üìò Result"},
    "download": {"Fran√ßais": "üì• T√©l√©charger au format PDF", "English": "üì• Download PDF"},
    "feedback": {"Fran√ßais": "üí¨ Avez-vous des remarques ou questions ?", "English": "üí¨ Any feedback or question?"},
    "send": {"Fran√ßais": "Envoyer", "English": "Send"},
    "disclaimer": {
        "Fran√ßais": "‚ö†Ô∏è Ce document est une explication simplifi√©e √† but informatif uniquement. Il ne constitue pas un avis m√©dical. Aucun stockage ou transmission de donn√©es n\'a lieu.",
        "English": "‚ö†Ô∏è This is a simplified explanation for informational purposes only. It does not constitute medical advice. No data is stored or transmitted."
    }
}


client = OpenAI(api_key=st.secrets["openai_api_key"])

def anonymiser(texte):
    texte = re.sub(r"(?i)(nom|pr√©nom|patient|docteur|dr)[ :]*[A-Z√â√à√Ä√Ç√ä√é√î√õ√á\-]+", "[ANONYME]", texte)
    texte = re.sub(r"[A-Z]{2,}( [A-Z]{2,})*", "[ANONYME]", texte)
    texte = re.sub(r"\d{2}/\d{2}/\d{4}", "[DATE]", texte)
    texte = re.sub(r"\d{1,3} ?(ans|yo)", "[√ÇGE]", texte, flags=re.IGNORECASE)
    texte = re.sub(r"\d{11,}", "[NUM√âRO]", texte)
    texte = re.sub(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", "[EMAIL]", texte)
    return texte

def get_prompt(texte, langue):
    if langue == "Fran√ßais":
        return (
            "Tu es un m√©decin sp√©cialiste en imagerie m√©dicale. "
            "Ta mission est d‚Äôexpliquer de mani√®re neutre un compte rendu m√©dical √† un patient non m√©decin.\n\n"
            "Voici le compte rendu (d√©j√† anonymis√©) :\n\n"
            f"{texte}\n\n"
            "Ta r√©ponse doit suivre ces r√®gles :\n"
            "- Aucune mention de traitement ou de suivi.\n"
            "- Ne jamais inventer d'information : si quelque chose n'est pas dans le texte, dis-le simplement.\n"
            "- Aucun nom de radiologue, ni formule de politesse.\n"
            "- Utilise un langage clair, factuel, compr√©hensible par un patient, sans jargon.\n\n"
            "Structure la r√©ponse comme suit :\n"
            "1. R√©sum√© des r√©sultats\n"
            "2. Explication p√©dagogique\n"
            "3. Impact potentiel (si cela est mentionn√© dans le texte)\n\n"
            "Ne sors jamais du cadre du contenu fourni."
        )
    else:
        return (
            "You are a medical imaging specialist. "
            "Your task is to explain a radiology report in plain language to a non-medical patient.\n\n"
            "Here is the anonymized report:\n\n"
            f"{texte}\n\n"
            "Your response must follow these rules:\n"
            "- No mention of treatment or follow-up.\n"
            "- Do not invent information: if something is not in the text, say so.\n"
            "- No mention of radiologist or polite phrases.\n"
            "- Use clear, factual language understandable by a non-doctor.\n\n"
            "Structure your response as:\n"
            "1. Summary of findings\n"
            "2. Educational explanation\n"
            "3. Potential impact (if mentioned)\n\n"
            "Stick strictly to the content provided."
        )

def vulgariser(texte, langue):
    prompt = get_prompt(texte, langue)
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a neutral medical explainer."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.3
    )
    return response.choices[0].message.content

def generer_pdf(texte, langue):
    temp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    doc = SimpleDocTemplate(temp.name, pagesize=A4, rightMargin=20, leftMargin=20, topMargin=20, bottomMargin=30)
    styles = getSampleStyleSheet()
    normal_style = ParagraphStyle('Normal', fontName='Helvetica', fontSize=11, leading=14)
    disclaimer_style = ParagraphStyle('Disclaimer', fontSize=9, textColor='gray')

    flowables = []
    for line in texte.split("\n"):
        flowables.append(Paragraph(line.strip(), normal_style))
        flowables.append(Spacer(1, 5))
    flowables.append(Spacer(1, 10))
    flowables.append(Paragraph(T["disclaimer"][langue], disclaimer_style))

    doc.build(flowables)
    return temp.name

uploaded_file = st.file_uploader(T["upload"][lang], type=["pdf"])

if uploaded_file:
    with pdfplumber.open(io.BytesIO(uploaded_file.read())) as pdf:
        texte = "\n".join(page.extract_text() or "" for page in pdf.pages)

    if not texte.strip():
        st.error(T["error"][lang])
    else:
        texte_anonyme = anonymiser(texte)

        if st.button(T["process"][lang]):
            with st.spinner(T["processing"][lang]):
                texte_vulgarise = vulgariser(texte_anonyme, lang)
            st.success(T["done"][lang])
            st.subheader(T["result"][lang])
            st.write(texte_vulgarise)

            pdf_path = generer_pdf(texte_vulgarise, lang)
            with open(pdf_path, "rb") as f:
                st.download_button(T["download"][lang], data=f, file_name="vulgarisation.pdf", mime="application/pdf")
            os.remove(pdf_path)

feedback = st.text_area(T["feedback"][lang])
if st.button(T["send"][lang]):
    st.success("‚úÖ Merci pour votre retour." if is_fr else "‚úÖ Thank you for your feedback.")

